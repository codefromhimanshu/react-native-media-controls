{"version":3,"file":"react-native-media-controls.cjs.production.min.js","sources":["../src/constants/playerStates.ts","../src/MediaControls.style.ts","../src/utils.ts","../src/Controls.tsx","../src/Slider.tsx","../src/VolumeControls.tsx","../src/MediaControls.tsx","../src/Toolbar.tsx"],"sourcesContent":["enum PLAYER_STATES {\n  PLAYING = 0,\n  PAUSED = 1,\n  ENDED = 2,\n}\n\nexport { PLAYER_STATES };\n","import { StyleSheet } from \"react-native\";\n\nconst containerBackgroundColor = \"rgba(45, 59, 62, 0)\";\nconst playButtonBorderColor = \"rgba(255,255,255,0.5)\";\nconst white = \"#fff\";\n\nexport default StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n    backgroundColor: containerBackgroundColor,\n    bottom: 0,\n    flex: 1,\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    left: 0,\n    paddingHorizontal: 20,\n    paddingVertical: 13,\n    position: \"absolute\",\n    right: 0,\n    top: 0,\n  },\n  controlsRow: {\n    alignItems: \"center\",\n    alignSelf: \"stretch\",\n    flex: 1,\n    justifyContent: \"center\",\n  },\n  fullScreenContainer: {\n    alignItems: \"center\",\n    alignSelf: \"stretch\",\n    justifyContent: \"center\",\n    paddingLeft: 20,\n  },\n  playButton: {\n    alignItems: \"center\",\n    borderColor: playButtonBorderColor,\n    borderRadius: 100,\n    borderWidth: 0,\n    height: 50,\n    justifyContent: \"center\",\n    width: 50,\n  },\n  muteIcon: {\n    height: 22,\n    resizeMode: \"contain\",\n    width: 22,\n  },\n  playIcon: {\n    height: 22,\n    resizeMode: \"contain\",\n    width: 22,\n  },\n  progressColumnContainer: {\n    flex: 1,\n  },\n  progressContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n    marginBottom: -25,\n  },\n  progressSlider: {\n    alignSelf: \"stretch\",\n  },\n  replayIcon: {\n    height: 20,\n    resizeMode: \"stretch\",\n    width: 25,\n  },\n  thumb: {\n    backgroundColor: white,\n    borderRadius: 50,\n    borderWidth: 3,\n    height: 20,\n    width: 20,\n  },\n  timeRow: {\n    alignSelf: \"stretch\",\n  },\n  timerLabel: {\n    color: white,\n    fontSize: 12,\n  },\n  timerLabelsContainer: {\n    alignSelf: \"stretch\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    marginBottom: -7,\n  },\n  toolbar: {\n    flexDirection: \"row\",\n    flex: 1,\n    justifyContent: \"flex-end\",\n  },\n  toolbarRow: {\n    alignItems: \"flex-start\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-start\",\n  },\n  track: {\n    borderRadius: 1,\n    height: 5,\n  },\n});\n","import { PLAYER_STATES } from \"./constants/playerStates\";\n\nexport const humanizeVideoDuration = (seconds: number) => {\n  const [begin, end] = seconds >= 3600 ? [11, 8] : [14, 5];\n  const date = new Date(0);\n\n  date.setSeconds(seconds);\n  return date.toISOString().substr(begin, end);\n};\n\nexport const noop = () => {};\n\nexport const getPlayerStateIcon = (playerState: PLAYER_STATES) => {\n  switch (playerState) {\n    case PLAYER_STATES.PAUSED:\n      return require(\"./assets/ic_play.png\");\n    case PLAYER_STATES.PLAYING:\n      return require(\"./assets/ic_pause.png\");\n    case PLAYER_STATES.ENDED:\n      return require(\"./assets/ic_replay.png\");\n    default:\n      return null;\n  }\n};\n","import React from \"react\";\nimport { TouchableOpacity, View, ActivityIndicator, Image } from \"react-native\";\nimport styles from \"./MediaControls.style\";\nimport { getPlayerStateIcon } from \"./utils\";\nimport { Props } from \"./MediaControls\";\nimport { PLAYER_STATES } from \"./constants/playerStates\";\n\ntype ControlsProps = Pick<\n  Props,\n  \"isLoading\" | \"mainColor\" | \"playerState\" | \"onReplay\"\n> & {\n  onPause: () => void;\n};\n\nconst Controls = (props: ControlsProps) => {\n  const { isLoading, mainColor, playerState, onReplay, onPause } = props;\n  const icon = getPlayerStateIcon(playerState);\n  const pressAction = playerState === PLAYER_STATES.ENDED ? onReplay : onPause;\n\n  const content = isLoading ? (\n    <ActivityIndicator size=\"large\" color=\"#FFF\" />\n  ) : (\n    <TouchableOpacity\n      style={[styles.playButton, { backgroundColor: mainColor }]}\n      onPress={pressAction}\n      accessibilityLabel={PLAYER_STATES.PAUSED ? \"Tap to Play\" : \"Tap to Pause\"}\n      accessibilityHint={\"Plays and Pauses the Video\"}\n    >\n      <Image source={icon} style={styles.playIcon} />\n    </TouchableOpacity>\n  );\n\n  return <View style={[styles.controlsRow]}>{content}</View>;\n};\n\nexport { Controls };\n","import React from \"react\";\nimport { TouchableOpacity, View, Text, Image, ViewStyle } from \"react-native\";\nimport RNSlider from \"react-native-slider\";\nimport styles from \"./MediaControls.style\";\nimport { humanizeVideoDuration } from \"./utils\";\nimport { Props as MediaControlsProps } from \"./MediaControls\";\nimport { PLAYER_STATES } from \"./constants/playerStates\";\n\nexport type CustomSliderStyle = {\n  containerStyle: ViewStyle;\n  trackStyle: ViewStyle;\n  thumbStyle: ViewStyle;\n};\n\ntype Props = Pick<\n  MediaControlsProps,\n  | \"progress\"\n  | \"duration\"\n  | \"mainColor\"\n  | \"onFullScreen\"\n  | \"playerState\"\n  | \"onSeek\"\n  | \"onSeeking\"\n> & {\n  onPause: () => void;\n  customSliderStyle?: CustomSliderStyle;\n};\n\nconst fullScreenImage = require(\"./assets/ic_fullscreen.png\");\n\nconst Slider = (props: Props) => {\n  const {\n    customSliderStyle,\n    duration,\n    mainColor,\n    onFullScreen,\n    onPause,\n    progress,\n  } = props;\n\n  const containerStyle = customSliderStyle?.containerStyle || {};\n  const customTrackStyle = customSliderStyle?.trackStyle || {};\n  const customThumbStyle = customSliderStyle?.thumbStyle || {};\n\n  const dragging = (value: number) => {\n    const { onSeeking, playerState } = props;\n    onSeeking(value);\n\n    if (playerState === PLAYER_STATES.PAUSED) {\n      return;\n    }\n\n    onPause();\n  };\n\n  const seekVideo = (value: number) => {\n    props.onSeek(value);\n    onPause();\n  };\n\n  return (\n    <View\n      style={[styles.controlsRow, styles.progressContainer, containerStyle]}\n    >\n      <View style={styles.progressColumnContainer}>\n        <View style={[styles.timerLabelsContainer]}>\n          <Text style={styles.timerLabel}>\n            {humanizeVideoDuration(progress)}\n          </Text>\n          <Text style={styles.timerLabel}>\n            {humanizeVideoDuration(duration)}\n          </Text>\n        </View>\n        <RNSlider\n          style={[styles.progressSlider]}\n          onValueChange={dragging}\n          onSlidingComplete={seekVideo}\n          maximumValue={Math.floor(duration)}\n          value={Math.floor(progress)}\n          trackStyle={[styles.track, customTrackStyle]}\n          thumbStyle={[\n            styles.thumb,\n            customThumbStyle,\n            { borderColor: mainColor },\n          ]}\n          minimumTrackTintColor={mainColor}\n        />\n      </View>\n      {Boolean(onFullScreen) && (\n        <TouchableOpacity\n          style={styles.fullScreenContainer}\n          onPress={onFullScreen}\n        >\n          <Image source={fullScreenImage} />\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};\n\nexport { Slider };\n","import React from \"react\";\nimport { TouchableOpacity, View, Image } from \"react-native\";\nimport styles from \"./MediaControls.style\";\nimport { Props } from \"./MediaControls\";\n\ntype VolumeControlsProps = Pick<\n  Props,\n  \"onMute\" | \"mute\" \n> & {\n  \n};\n\nconst VolumeControls = (props: VolumeControlsProps) => {\n  const { onMute, mute } = props;\n  const icon = mute ? require(\"./assets/mute.png\") : require(\"./assets/unmute.png\");\n  const content = (\n    <TouchableOpacity\n      style={[styles.playButton]}\n      onPress={onMute}\n      accessibilityLabel={!mute ? \"Tap to mute\" : \"Tap to unmute\"}\n      accessibilityHint={\"Mute & unmute the Video\"}\n    >\n      <Image source={icon} style={styles.muteIcon} />\n    </TouchableOpacity>\n  );\n\n  return <View style={[styles.controlsRow]}>{content}</View>;\n};\n\nexport { VolumeControls };\n","import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  GestureResponderEvent,\n  ViewStyle,\n} from \"react-native\";\nimport styles from \"./MediaControls.style\";\nimport { PLAYER_STATES } from \"./constants/playerStates\";\nimport { Controls } from \"./Controls\";\nimport { Slider, CustomSliderStyle } from \"./Slider\";\nimport { Toolbar } from \"./Toolbar\";\nimport {VolumeControls} from \"./VolumeControls\";\n\nexport type Props = {\n  children: React.ReactNode;\n  containerStyle: ViewStyle;\n  duration: number;\n  fadeOutDelay?: number;\n  isFullScreen?: boolean;\n  isLoading: boolean;\n  mainColor: string;\n  onFullScreen?: (event: GestureResponderEvent) => void;\n  onPaused: (playerState: PLAYER_STATES) => void;\n  onReplay: () => void;\n  onSeek: (value: number) => void;\n  onSeeking: (value: number) => void;\n  playerState: PLAYER_STATES;\n  progress: number;\n  showOnStart?: boolean;\n  sliderStyle: CustomSliderStyle;\n  toolbarStyle: ViewStyle;\n  onMute: () => void;\n  mute: boolean;\n};\n\nconst MediaControls = (props: Props) => {\n  const {\n    children,\n    containerStyle: customContainerStyle = {},\n    duration,\n    fadeOutDelay = 5000,\n    isLoading = false,\n    mainColor = \"rgba(12, 83, 175, 0.9)\",\n    onFullScreen,\n    onReplay: onReplayCallback,\n    onSeek,\n    onSeeking,\n    playerState,\n    progress,\n    showOnStart = true,\n    sliderStyle, // defaults are applied in Slider.tsx\n    toolbarStyle: customToolbarStyle = {},\n    onMute,\n    mute,\n  } = props;\n  const { initialOpacity, initialIsVisible } = (() => {\n    if (showOnStart) {\n      return {\n        initialOpacity: 1,\n        initialIsVisible: true,\n      };\n    }\n\n    return {\n      initialOpacity: 0,\n      initialIsVisible: false,\n    };\n  })();\n\n  const [opacity] = useState(new Animated.Value(initialOpacity));\n  const [isVisible, setIsVisible] = useState(initialIsVisible);\n\n  useEffect(() => {\n    fadeOutControls(fadeOutDelay);\n  }, []);\n\n  const fadeOutControls = (delay = 0) => {\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: 300,\n      delay,\n      useNativeDriver: false,\n    }).start(result => {\n      /* I noticed that the callback is called twice, when it is invoked and when it completely finished\n      This prevents some flickering */\n      if (result.finished) {\n        setIsVisible(false);\n      }\n    });\n  };\n\n  const fadeInControls = (loop = true) => {\n    setIsVisible(true);\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: 300,\n      delay: 0,\n      useNativeDriver: false,\n    }).start(() => {\n      if (loop) {\n        fadeOutControls(fadeOutDelay);\n      }\n    });\n  };\n\n  const onReplay = () => {\n    fadeOutControls(fadeOutDelay);\n    onReplayCallback();\n  };\n\n  const cancelAnimation = () => opacity.stopAnimation(() => setIsVisible(true));\n\n  const onPause = () => {\n    const { playerState, onPaused } = props;\n    const { PLAYING, PAUSED, ENDED } = PLAYER_STATES;\n    switch (playerState) {\n      case PLAYING: {\n        cancelAnimation();\n        break;\n      }\n      case PAUSED: {\n        fadeOutControls(fadeOutDelay);\n        break;\n      }\n      case ENDED:\n        break;\n    }\n\n    const newPlayerState = playerState === PLAYING ? PAUSED : PLAYING;\n    return onPaused(newPlayerState);\n  };\n\n  const toggleControls = () => {\n    // value is the last value of the animation when stop animation was called.\n    // As this is an opacity effect, I (Charlie) used the value (0 or 1) as a boolean\n    opacity.stopAnimation((value: number) => {\n      setIsVisible(!!value);\n      return value ? fadeOutControls() : fadeInControls();\n    });\n  };\n\n  return (\n    <TouchableWithoutFeedback accessible={false} onPress={toggleControls}>\n      <Animated.View style={[styles.container, { opacity }]}>\n        {isVisible && (\n          <View style={[styles.container, customContainerStyle]}>\n            <View\n              style={[\n                styles.controlsRow,\n                styles.toolbarRow,\n                customToolbarStyle,\n              ]}\n            >\n              {children}\n            </View>\n            <VolumeControls \n              mute={mute}\n              onMute={onMute}\n            />\n            <Controls\n              onPause={onPause}\n              onReplay={onReplay}\n              isLoading={isLoading}\n              mainColor={mainColor}\n              playerState={playerState}\n            />\n            <Slider\n              progress={progress}\n              duration={duration}\n              mainColor={mainColor}\n              onFullScreen={onFullScreen}\n              playerState={playerState}\n              onSeek={onSeek}\n              onSeeking={onSeeking}\n              onPause={onPause}\n              customSliderStyle={sliderStyle}\n            />\n          </View>\n        )}\n      </Animated.View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nMediaControls.Toolbar = Toolbar;\n\nexport default MediaControls;\n","import React from \"react\";\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst Toolbar = ({ children }: Props) => <>{children}</>;\n\nexport { Toolbar };\n"],"names":["PLAYER_STATES","StyleSheet","create","container","alignItems","backgroundColor","bottom","flex","flexDirection","justifyContent","left","paddingHorizontal","paddingVertical","position","right","top","controlsRow","alignSelf","fullScreenContainer","paddingLeft","playButton","borderColor","borderRadius","borderWidth","height","width","muteIcon","resizeMode","playIcon","progressColumnContainer","progressContainer","marginBottom","progressSlider","replayIcon","thumb","timeRow","timerLabel","color","fontSize","timerLabelsContainer","toolbar","toolbarRow","track","humanizeVideoDuration","seconds","begin","end","date","Date","setSeconds","toISOString","substr","Controls","props","isLoading","mainColor","playerState","onReplay","onPause","icon","PAUSED","require","PLAYING","ENDED","getPlayerStateIcon","pressAction","content","React","ActivityIndicator","size","TouchableOpacity","style","styles","onPress","accessibilityLabel","accessibilityHint","Image","source","View","fullScreenImage","Slider","customSliderStyle","duration","onFullScreen","progress","customTrackStyle","trackStyle","customThumbStyle","thumbStyle","containerStyle","Text","RNSlider","onValueChange","value","onSeeking","onSlidingComplete","onSeek","maximumValue","Math","floor","minimumTrackTintColor","Boolean","VolumeControls","onMute","mute","MediaControls","children","customContainerStyle","fadeOutDelay","onReplayCallback","showOnStart","sliderStyle","toolbarStyle","customToolbarStyle","initialOpacity","initialIsVisible","opacity","useState","Animated","Value","isVisible","setIsVisible","useEffect","fadeOutControls","delay","timing","toValue","useNativeDriver","start","result","finished","onPaused","stopAnimation","TouchableWithoutFeedback","accessible","loop","Toolbar"],"mappings":"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"}